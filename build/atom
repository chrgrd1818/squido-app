<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://squido-app.pages.dev</id>
    <title>squido FAQ</title>
    <updated>2021-09-27T16:49:12.193Z</updated>
    <generator>squido</generator>
    <link rel="alternate" href="https://squido-app.pages.dev"/>
    <link rel="self" href="https://squido-app.pages.dev/atom"/>
    <subtitle>An FAQ theme for squido</subtitle>
    <icon>https://squido-app.pages.dev/favicon.png</icon>
    <entry>
        <title type="html"><![CDATA[Hello World ]]></title>
        <id>https://squido-app.pages.dev/a/hello-world</id>
        <link href="https://squido-app.pages.dev/a/hello-world"/>
        <updated>2021-09-26T18:59:00.000Z</updated>
        <summary type="html"><![CDATA[Hello World]]></summary>
        <content type="html"><![CDATA[<h1 id="e">E</h1>
<h2 id="lalala">lalala</h2>
<p>Lorem <strong>ipsum</strong> <em>sjgsj</em></p>
<ul>
<li>kkshfwef</li>
<li>dfjkenoce</li>
<li>ckncdanc</li>
</ul>
<h2 id="hshsldjfsc">hshsldjfsc</h2>
<p>Loem ipsum <em>jkafhkjhfekf</em></p>
<ol>
<li>jefejshfw</li>
<li>dsjkfdsnfsdln</li>
<li>fdksndskjnsdj</li>
</ol>
<span style="font-family:Papyrus; font-size:1em;color:red">
ehfjkfkjafnkfc
</span>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Getting started Yesaaaaa]]></title>
        <id>https://squido-app.pages.dev/getting-started</id>
        <link href="https://squido-app.pages.dev/getting-started"/>
        <updated>2021-03-09T18:59:00.000Z</updated>
        <summary type="html"><![CDATA[Getting started with squido]]></summary>
        <content type="html"><![CDATA[<img src="https://raw.githubusercontent.com/mrvautin/squido/main/docs/images/squido.svg" width="200" height="200" alt="squido logo">
<h2 id="what-is-squido-xxxx%3F">What is squido XXXx?</h2>
<p><code>squido</code> is a dead simple static website builder which can be hosted anywhere for super fast websites and very little effort.</p>
<p>The idea is to be a <code>no-code</code> setup and have everything you need to run and host a website. You simply do the writing and customization of style and layout.</p>
<h2 id="installation">Installation</h2>
<p>Simply install the <code>squido</code> cli module globally in order to build and manage your static site.</p>
<p>From Github (preferred for latest version)</p>
<pre><code class="language-plaintext">$ npm i -g https://github.com/mrvautin/squido.git
</code></pre>
<p>From npm</p>
<pre><code class="language-plaintext">$ npm install -g squido
</code></pre>
<p>With Yarn</p>
<pre><code class="language-plaintext">$ yarn global add squido
</code></pre>
<h3 id="start-from-default-blog-setup">Start from default blog setup</h3>
<div class="bd-callout bd-callout-squido">
Warning: This will overwrite any existing content you've created
</div>
<p>Make your <code>squido</code> website directory:</p>
<pre><code class="language-plaintext">$ mkdir my-squido-website
</code></pre>
<p>Enter your new <code>squido</code> website directory:</p>
<pre><code class="language-plaintext">$ cd my-squido-website
</code></pre>
<p>Setup a new <code>squido</code> website from defaults</p>
<pre><code class="language-plaintext">$ squido new
</code></pre>
<h3 id="start-from-scratch">Start from scratch</h3>
<p>Make your <code>squido</code> website directory:</p>
<pre><code class="language-plaintext">$ mkdir my-squido-website
</code></pre>
<p>Enter your new <code>squido</code> website directory:</p>
<pre><code class="language-plaintext">$ cd my-squido-website
</code></pre>
<p>Get started building your <code>squido</code> website <a href="https://docs.squido.org/structure/">structure</a>.</p>
<h3 id="start-from-template">Start from template</h3>
<p>The example we will use below is our <a href="https://github.com/mrvautin/squido-blog-example">blog</a> example. There is also a <a href="https://github.com/mrvautin/squido-docs">documentation</a> website example you can use.</p>
<pre><code class="language-plaintext">$ git clone https://github.com/mrvautin/squido-blog-example my-squido-website
</code></pre>
<p class="fst-italic">Replace <code>my-squido-website</code> with your new website directory name</p>
<p>Enter your new <code>squido</code> website directory:</p>
<pre><code class="language-plaintext">$ cd my-squido-website
</code></pre>
<p>Run the following command to build, clean, serve and watch for changes:</p>
<pre><code class="language-plaintext">$ squido serve -b -w -c
</code></pre>
<p>You can then visit your website here:</p>
<pre><code class="language-plaintext">http://localhost:4965
</code></pre>
<blockquote>
<p><code>Clean</code> = removes everything in your <code>/build</code> directory.</p>
</blockquote>
<blockquote>
<p><code>Serve</code> = starts a web server so you can view your website.</p>
</blockquote>
<h3 id="without-git">Without Git</h3>
<p>Whilst it's best and easiest (depending on the user) to use <code>squido</code> with Git to manage deployment and source control. If you don't want to use Git you can use our <a href="/post-build-tasks/">Post Build</a> tasks to easily deploy and manage your website.</p>
<h3 id="create-git-repository">Create Git repository</h3>
<ol>
<li>Create repository:</li>
</ol>
<p><img src="/content/images/github/create-repository-create.png" alt="Create repository"></p>
<ol start="2">
<li>Set the repository name:</li>
</ol>
<p><img src="/content/images/github/create-repository-name.png" alt="Set repository name"></p>
<ol start="3">
<li>Set public/private:</li>
</ol>
<p><img src="/content/images/github/create-repository-public-private.png" alt="Set repository name"></p>
<ol start="4">
<li>Finish creating the repository:</li>
</ol>
<p><img src="/content/images/github/create-repository-button.png" alt="Set repository name"></p>
<ol start="5">
<li>Add your new repository to your git remotes:</li>
</ol>
<pre><code class="language-bash">$ git remote add origin https://github.com/user/repo.git
</code></pre>
<ol start="6">
<li>Check remote is correctly added:</li>
</ol>
<pre><code class="language-bash">$ git remote -v
<span class="hljs-comment"># Verify new remote</span>
&gt; origin  https://github.com/user/repo.git (fetch)
&gt; origin  https://github.com/user/repo.git (push)
</code></pre>
<ol start="7">
<li>Create your first post: <code>/source/posts/hello-world.markdown</code></li>
</ol>
<pre><code class="language-yaml"><span class="hljs-meta">---</span>
<span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span>
<span class="hljs-attr">permalink:</span> <span class="hljs-string">hello-world</span>
<span class="hljs-attr">description:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span>
<span class="hljs-attr">date:</span> <span class="hljs-string">&#x27;2021-03-10 01:59:00&#x27;</span>
<span class="hljs-meta">---
</span></code></pre>
<ol start="8">
<li>Add your new files to first commit:</li>
</ol>
<pre><code class="language-bash">$ git add .
</code></pre>
<ol start="9">
<li>Commit your files/changes:</li>
</ol>
<pre><code class="language-bash">$ git commit -m <span class="hljs-string">&quot;First commit&quot;</span>
</code></pre>
<ol start="10">
<li>Push your changes to your repository:</li>
</ol>
<pre><code class="language-bash">$ git push
</code></pre>
<p>Setup the <a href="https://docs.squido.org/deployment-and-hosting/">deploy/hosting</a>.</p>
<h2 id="demos">Demos</h2>
<p>Blog style: <a href="https://blog.squido.org">https://blog.squido.org</a></p>
<p>Documentation style: This website</p>
<p>Traditional website: <a href="https://squido.org">https://squido.org</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Structure]]></title>
        <id>https://squido-app.pages.dev/structure</id>
        <link href="https://squido-app.pages.dev/structure"/>
        <updated>2021-03-08T18:58:00.000Z</updated>
        <summary type="html"><![CDATA[Getting started with the squido structure]]></summary>
        <content type="html"><![CDATA[<p>You can start by grabbing everything in the <code>/source</code> directory of <a href="https://github.com/mrvautin/squido/tree/main/source">here</a>.</p>
<p>The structure will look something like:</p>
<p><img src="/content/images/structure.png" alt="Folder structure"></p>
<p>The <code>/&lt;source_dir&gt;</code> directory is the default directory for all the source files. You can change by adding another directory in the <code>sourceDir</code> of the <code>config.js</code> file.</p>
<table class="table table-bordered">
<thead>
<tr>
<th>File name</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>index.hbs</code></td>
<td>The root of your website. The first page which will be rendered.</td>
</tr>
<tr>
<td><code>post.hbs</code></td>
<td>Will render the contents of the <code>.markdown</code> files in <code>/&lt;source_dir&gt;/posts</code></td>
</tr>
<tr>
<td><code>page.hbs</code></td>
<td>Displayed at <code>/page/x</code> for the pagination of posts</td>
</tr>
<tr>
<td><code>tag.hbs</code></td>
<td>Displayed at <code>/tag/x</code> for the collection of posts by tag</td>
</tr>
</tbody>
</table>
<p>Your posts go in the <code>/&lt;source_dir&gt;/posts</code> directory. You will have <code>.markdown</code> files for each post/page you want.</p>
<p>The <code>content</code> directory contains the files used for your website. Eg: Stylesheets, images, javascript files etc.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Usage / Commands]]></title>
        <id>https://squido-app.pages.dev/usage-commands</id>
        <link href="https://squido-app.pages.dev/usage-commands"/>
        <updated>2021-03-07T18:57:00.000Z</updated>
        <summary type="html"><![CDATA[Getting started with the squido commands]]></summary>
        <content type="html"><![CDATA[<p>The CLI comes with a few commands.</p>
<pre><code class="language-bash">Usage: cli [options] [<span class="hljs-built_in">command</span>]

Options:
  -V, --version    output the version number
  -h, --<span class="hljs-built_in">help</span>       output usage information

Commands:
  build [options]  Builds your website
  clean            Clean your website build
  serve [options]  Serves website
</code></pre>
<h4 id="build-command">Build command</h4>
<p>The <code>build</code> command has the following options:</p>
<pre><code class="language-bash">Usage: build [options]

Builds your website

Options:
  -c --clean  Cleans build directory
  -h, --<span class="hljs-built_in">help</span>  output usage information
</code></pre>
<h4 id="import-command">Import command</h4>
<p>The <code>import</code> command allows you to import content from external sources. It has the following options:</p>
<pre><code class="language-bash">Usage: import [options]

Import from external sources

Options:
  -f, --file &lt;path&gt;  Specify file to import
  -t, --<span class="hljs-built_in">type</span> &lt;<span class="hljs-built_in">type</span>&gt;  Specify the <span class="hljs-built_in">type</span> of file to import. Eg: wordpress or ghost
  -h, --<span class="hljs-built_in">help</span>         output usage information
</code></pre>
<h4 id="clean-command">Clean command</h4>
<p>The <code>clean</code> command has the following options:</p>
<pre><code class="language-bash">Usage: clean [options]

Clean your website build

Options:
  -h, --<span class="hljs-built_in">help</span>  output usage information
</code></pre>
<h4 id="serve-command">Serve command</h4>
<p>The <code>serve</code> command has the following options:</p>
<pre><code class="language-bash">Usage: serve [options]

Serves website

Options:
  -w --watch  Watches <span class="hljs-keyword">for</span> changes
  -b --build  Builds on start
  -c --clean  Cleans build directory
  -h, --<span class="hljs-built_in">help</span>  output usage information
</code></pre>
<h4 id="new-command">New command</h4>
<p>This command sets up a new website from our blog template.</p>
<div class="bd-callout bd-callout-squido">
Warning: This will overwrite any existing content you've created
</div>
<p>The <code>new</code> command has the following options:</p>
<pre><code class="language-bash">Usage: new [options]

Sets up a new website

Options:
  -h, --<span class="hljs-built_in">help</span>  output usage information
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Configuration]]></title>
        <id>https://squido-app.pages.dev/configuration</id>
        <link href="https://squido-app.pages.dev/configuration"/>
        <updated>2021-03-06T18:56:00.000Z</updated>
        <summary type="html"><![CDATA[Getting started with the squido configuration]]></summary>
        <content type="html"><![CDATA[<p>An example config can be seen below. You can see that you can specify different values for different environments you run. <code>development</code> and <code>production</code> are examples but they need to match up with whatever <code>NODE_ENV</code> is set. If one is not set, the default is <code>development</code>.</p>
<pre><code class="language-javascript"><span class="hljs-keyword">const</span> config = {
    <span class="hljs-attr">development</span>: {
        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;squido&#x27;</span>,
        <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;This is the blog description&#x27;</span>,
        <span class="hljs-attr">twitterHandle</span>: <span class="hljs-string">&#x27;@mrvautin&#x27;</span>,
        <span class="hljs-attr">baseUrl</span>: <span class="hljs-string">&#x27;http://localhost:4965&#x27;</span>,
        <span class="hljs-attr">sourcesExt</span>: <span class="hljs-string">&#x27;markdown&#x27;</span>,
        <span class="hljs-attr">templateEngine</span>: <span class="hljs-string">&#x27;hbs&#x27;</span>,
        <span class="hljs-attr">templateConfig</span>: {},
        <span class="hljs-attr">sourceDir</span>: <span class="hljs-string">&#x27;source&#x27;</span>,
        <span class="hljs-attr">buildDir</span>: <span class="hljs-string">&#x27;build&#x27;</span>,
        <span class="hljs-attr">summaryLength</span>: <span class="hljs-number">250</span>,
        <span class="hljs-attr">port</span>: <span class="hljs-number">4965</span>,
        <span class="hljs-attr">pagination</span>: <span class="hljs-literal">true</span>,
        <span class="hljs-attr">postPerPage</span>: <span class="hljs-number">8</span>
    },
    <span class="hljs-attr">production</span>: {
        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;squido&#x27;</span>,
        <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;This is the blog description&#x27;</span>,
        <span class="hljs-attr">twitterHandle</span>: <span class="hljs-string">&#x27;@mrvautin&#x27;</span>,
        <span class="hljs-attr">baseUrl</span>: <span class="hljs-string">&#x27;http://example.com&#x27;</span>,
        <span class="hljs-attr">sourcesExt</span>: <span class="hljs-string">&#x27;markdown&#x27;</span>,
        <span class="hljs-attr">templateEngine</span>: <span class="hljs-string">&#x27;hbs&#x27;</span>,
        <span class="hljs-attr">templateConfig</span>: {},
        <span class="hljs-attr">sourceDir</span>: <span class="hljs-string">&#x27;source&#x27;</span>,
        <span class="hljs-attr">buildDir</span>: <span class="hljs-string">&#x27;build&#x27;</span>,
        <span class="hljs-attr">summaryLength</span>: <span class="hljs-number">250</span>,
        <span class="hljs-attr">port</span>: <span class="hljs-number">4965</span>,
        <span class="hljs-attr">pagination</span>: <span class="hljs-literal">true</span>,
        <span class="hljs-attr">postPerPage</span>: <span class="hljs-number">8</span>,
        <span class="hljs-attr">postBuild</span>: [
            {
                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zip&#x27;</span>,
                <span class="hljs-attr">options</span>: {}
            }
        ]
    }
};

<span class="hljs-built_in">module</span>.exports = config;
</code></pre>
<p>The configuration options are self explanatory. You can use any of the config in your template files using <code>{{config.&lt;option&gt;}}</code>. Eg: For example <code>{{config.baseUrl}}</code>.</p>
<p>This is a static website so the <code>port</code> is used for spinning up a Web Server for development.</p>
<p>The <code>templateEngine</code> config allows for the setting of which template engine to use - either: <code>hbs</code> or <code>ejs</code> is allowed. The <code>templateConfig</code> object allows for the passing of configurations and is used when <code>ejs</code> is set for the <code>templateEngine</code>. See <a href="https://github.com/mde/ejs#options">here</a> for available <code>ejs</code> options.</p>
<p>The <code>postBuild</code> array is similar to the <a href="/plugins/">plugins</a> which allow you to specify tasks which run after the build is complete. The above configuration runs the <code>zip</code> task which is included in <code>squido</code> core which will zip up your <code>build</code> folder into a zip here: <code>/build/build.zip</code>. You may also use this <code>postBuild</code> task in conjunction with another task to push your website to your hosting provider in Zip format rather than using Git.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Posts]]></title>
        <id>https://squido-app.pages.dev/posts</id>
        <link href="https://squido-app.pages.dev/posts"/>
        <updated>2021-03-05T18:55:00.000Z</updated>
        <summary type="html"><![CDATA[Getting started with the squido post structure]]></summary>
        <content type="html"><![CDATA[<p>Posts are essentially pages or blog posts or whatever you like. The content of the post/page is contained in markdown files within the <code>/source/posts</code> folder. The post markdown or contents is rendered using the <code>post.hbs</code> template file. You can edit this any which way your want. See <a href="/templates/">templates</a> for more information.</p>
<p>Posts have a meta data component at the top of the file which directs how the file is built. The meta data is <code>yaml</code> formatted and sits between two <code>---</code> tags. Eg:</p>
<pre><code class="language-yaml"><span class="hljs-meta">---</span>
<span class="hljs-attr">title:</span> <span class="hljs-string">Caede</span> <span class="hljs-string">virides</span> <span class="hljs-string">oculos</span> <span class="hljs-string">armentis</span>
<span class="hljs-attr">permalink:</span> <span class="hljs-string">caede-virides-oculos-armentis</span>
<span class="hljs-attr">description:</span> <span class="hljs-string">Caede</span> <span class="hljs-string">virides</span> <span class="hljs-string">oculos</span> <span class="hljs-string">armentis</span>
<span class="hljs-attr">date:</span> <span class="hljs-string">&#x27;2021-03-11 19:17:00&#x27;</span>
<span class="hljs-attr">template:</span> <span class="hljs-string">post.hbs</span>
<span class="hljs-attr">ignore:</span> <span class="hljs-literal">true</span>
<span class="hljs-attr">hidden:</span> <span class="hljs-literal">false</span>
<span class="hljs-attr">tags:</span> 
  <span class="hljs-bullet">-</span> <span class="hljs-string">alter</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">tradere</span>
<span class="hljs-meta">---
</span></code></pre>
<p>You can add any data values your like but the example layouts uses the <code>title</code> and <code>description</code> for SEO for page title.</p>
<p>New meta data values can be access in the layouts using <code>{{meta.&lt;new value&gt;}}</code>.</p>
<p>The permalink is required. Its used to build the URL for your website: Eg. The above will output a post at: <code>https://example.com/caede-virides-oculos-armentis</code></p>
<p>The <code>visible</code> and <code>hidden</code> are optional tags for controlling the visibility of posts. <code>Defaults is &quot;true&quot;</code> or visible.</p>
<ul>
<li><code>visible</code>: If set to <code>false</code>, the post will not be in the pagination and won't show on the index page.</li>
<li><code>hidden</code>: If set to <code>true</code>, the post will not be in the sitemap and RSS feeds.</li>
</ul>
<h3 id="template-file">Template file</h3>
<p>The default template file name for posts is <code>post.hbs</code> but this can be overwritten per post by adding a <code>template</code> meta value to your post. Eg:</p>
<pre><code class="language-yaml"><span class="hljs-meta">---</span>
<span class="hljs-attr">template:</span> <span class="hljs-string">template-name.hbs</span>
<span class="hljs-meta">---
</span></code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown]]></title>
        <id>https://squido-app.pages.dev/markdown</id>
        <link href="https://squido-app.pages.dev/markdown"/>
        <updated>2021-03-04T18:55:00.000Z</updated>
        <summary type="html"><![CDATA[Getting started with the squido markdown format]]></summary>
        <content type="html"><![CDATA[<p><code>squido</code> uses <a href="http://spec.commonmark.org/">CommonMark</a> spec to process the markdown formatted posts.</p>
<p>A quick syntax summary to get your started:</p>
<table class="table table-hover table-bordered">
<thead>
<tr>
<th>Type</th>
<th>Renders</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>Italic</em> or _Italic_</td>
<td><em>Italic</em></td>
</tr>
<tr>
<td>*<em>Bold</em>* or _<em>Bold</em>_</td>
<td><strong>Bold</strong></td>
</tr>
<tr>
<td># Heading 1</td>
<td><h1>Heading 1</h1></td>
</tr>
<tr>
<td># Heading 2</td>
<td><h2>Heading 2</h2></td>
</tr>
<tr>
<td># Heading 3</td>
<td><h3>Heading 3</h3></td>
</tr>
<tr>
<td>[Link](https://a.com)</td>
<td><a href="https://a.com">Link</a></td>
</tr>
<tr>
<td>[Image](https://url/a.png)</td>
<td><img src="https://commonmark.org/help/images/favicon.png" alt="Link"></td>
</tr>
<tr>
<td>&gt; Blockquote</td>
<td><blockquote>Blockquote</blockquote></td>
</tr>
<tr>
<td>* List </br> * List <br> * List  <br> or <br> - List </br> - List <br> - List</td>
<td><ul><li>List</li><li>List</li><li>List</li></ul></td>
</tr>
<tr>
<td><code>1. List </br>2. List<br>3. List </code><br>or<br> 1) List </br> 2) List <br> 3) List</td>
<td><ol><li>List</li><li>List</li><li>List</li></ol></td>
</tr>
<tr>
<td>Horizontal rule: <br> ---  <br> or <br> ***</td>
<td>Horizontal rule: <br> <hr></td>
</tr>
<tr>
<td>`Inline code` with backticks</td>
<td><code>Inline code</code> with backticks</td>
</tr>
<tr>
<td>``` javascript <br> const test = () =&gt; {<br>   console.log('test');<br> }; <br>```</td>
<td><pre> const test = () =&gt; {<br>   console.log('test');<br> }; <br></pre></td>
</tr>
</tbody>
</table>
<h3 id="playground">Playground</h3>
<p>You can play around with the Markdown Playground <a href="https://spec.commonmark.org/dingus/">here</a>.</p>
<h3 id="code-syntax-highlighting">Code syntax highlighting</h3>
<p><code>squido</code> uses <a href="https://highlightjs.org/">Highlight.js</a> for code highlighting. This means you can use the code block example above with code wrapped in ``` backticks. You can specify the language by adding the <a href="https://highlightjs.org/static/demo/">language</a> for your code block.</p>
<p>For example, adding this:</p>
<p>``` javascript <br> function test(p1, p2) {<br>   console.log('test');<br> }; <br>```</p>
<p>Renders this:</p>
<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">p1, p2</span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;test&#x27;</span>);
};
</code></pre>
<h3 id="markdown-helpers">Markdown helpers</h3>
<h4 id="attributes">Attributes</h4>
<p>You can add any HTML attributes including ID's and classes by adding <code>{attribute}</code> to your Markdown syntax.</p>
<p>Adding a class to a header (<code>style-me</code> is the class):</p>
<p><code># header {.style-me}</code></p>
<p>Adding a <code>data-toggle</code> attribute to a paragraph:</p>
<p><code>paragraph {data-toggle=modal}</code></p>
<p>You can also use this on tables with multiple classes. Eg (<strong>note</strong> the empty line under the table):</p>
<pre><code class="language-no-highlight">My table       | Header                        
-------------- | ----------
Table          | Contents

{.table .table-hover .table-bordered}
</code></pre>
<p>Renders this:</p>
<table class="table table-hover table-bordered">
<thead>
<tr>
<th>My table</th>
<th>Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Table</td>
<td>Contents</td>
</tr>
</tbody>
</table>
<h4 id="heading-anchors">Heading anchors</h4>
<p>All headings are automatically rendered as # anchors to hyperlink (skip) to sections within a page / post. This means you add the <code>/#heading-name</code> to the URL to automatically jump to that heading.</p>
<p>For example:
<a href="https://docs.squido.org/markdown/#playground">https://docs.squido.org/markdown/#playground</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Templates]]></title>
        <id>https://squido-app.pages.dev/templates</id>
        <link href="https://squido-app.pages.dev/templates"/>
        <updated>2021-03-03T18:55:00.000Z</updated>
        <summary type="html"><![CDATA[Getting started with the squido templating]]></summary>
        <content type="html"><![CDATA[<p>Templates use <a href="https://handlebarsjs.com">Handlebars</a> formatting and the <code>{{}}</code> syntax or <a href="https://github.com/mde/ejs">EJS</a>. This guide will show <code>Handlebars</code> formatting. Documentation on changing the <code>templateEngine</code> can be found <a href="https://docs.squido.org/configuration/">here</a>.</p>
<div class="bd-callout bd-callout-squido">
This guide will show examples in <code>Handlebars</code> formatting.
Documentation on changing the <code>templateEngine</code> can be found <a href="https://docs.squido.org/configuration/">here</a>.
</div>
<p>The template files needed by default are:</p>
<ul>
<li><code>index.hbs</code></li>
<li><code>post.hbs</code></li>
<li><code>page.hbs</code></li>
<li><code>tag.hbs</code></li>
<li><code>404.hbs</code></li>
</ul>
<p>Also needed is a layout file called <code>layout.hbs</code> located here: <code>/source/layouts/layout.hbs</code>. This file drives the main layout of the page including the <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, <code>&lt;body&gt;</code> etc tags.</p>
<p>Accessible on all layout and templates files is your post meta using <code>{{meta.&lt;property&gt;}}</code> and your <code>config.js</code> object. You can access that using <code>{{config.&lt;propery&gt;}}</code>.</p>
<h2 id="index.hbs">index.hbs</h2>
<p>This is the entry point of your website, the <code>index.html</code> in the root of your build directory.</p>
<p>You will have access to a list of posts which you may want to display if building a blog or you may want to manually create a landing page for your website. The choice is yours.</p>
<p>If you were to render your posts you may want to do something like where <code>{{#each posts}}</code> is looping our list  of posts:</p>
<pre><code class="language-handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>
  </span><span class="hljs-template-tag">{{#<span class="hljs-name"><span class="hljs-builtin-name">each</span></span> posts}}</span><span class="xml">
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;article&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/</span></span></span><span class="hljs-template-variable">{{<span class="hljs-name">this.permalink</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/&quot;</span>&gt;</span></span><span class="hljs-template-variable">{{<span class="hljs-name">this.title</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> 
    <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
    </span><span class="hljs-template-variable">{{<span class="hljs-name">this.summary</span>}}</span><span class="xml">
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  </span><span class="hljs-template-tag">{{/<span class="hljs-name"><span class="hljs-builtin-name">each</span></span>}}</span><span class="xml">
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</span></code></pre>
<p>Depending on if you have <code>pagination</code> set to <code>true</code> in your config, you will either get a full list of articles or a paginated list. See <a href="#pagination">pagination</a> for more info.</p>
<h2 id="post.hbs">post.hbs</h2>
<p>This is the rendering of the post or the markdown content at the <code>permalink</code> set. Eg: <code>mydomain.com/permalink-value</code>.</p>
<p>To render the body of the markdown file you will need to add the following tag to your template: <code>{{{body}}}</code></p>
<p>You will have access to the full meta values of the page but can also access the title using <code>{{title}}</code>. Depending on whether you included tags in the meta data of the markdown file, you will also get a <code>tags</code> object you can loop through to display tags. See <a href="#tags">tags</a> for more info.</p>
<p>A simple post page could be:</p>
<pre><code class="language-handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-8 offset-md-2 mb-5&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-5&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">{{<span class="hljs-name">title</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
            </span><span class="hljs-template-variable">{{{<span class="hljs-name">body</span>}}}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</span></code></pre>
<h2 id="page.hbs">page.hbs</h2>
<p>This is the pagination aspect of your website. This template is used at <code>/page/x</code> (where <code>x</code> is the page number). If you are creating a blog which will have pagination this could look very similar to the <code>index.hbs</code> which shows all your articles/posts. Similar to the <code>index.hbs</code> you will get a <code>post</code> object with the posts you should render if you are doing pagination.</p>
<p>A simple template could look like:</p>
<pre><code class="language-handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>
  </span><span class="hljs-template-tag">{{#<span class="hljs-name"><span class="hljs-builtin-name">each</span></span> posts}}</span><span class="xml">
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-12 col-sm-3 mb-4 d-flex align-items-stretch&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card shadow-sm&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-body&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/</span></span></span><span class="hljs-template-variable">{{<span class="hljs-name">this.permalink</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/&quot;</span>&gt;</span></span><span class="hljs-template-variable">{{<span class="hljs-name">this.title</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> 
          <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
          </span><span class="hljs-template-variable">{{<span class="hljs-name">this.summary</span>}}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex justify-content-between align-items-center&quot;</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-outline-secondary&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/</span></span></span><span class="hljs-template-variable">{{<span class="hljs-name">this.permalink</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/&quot;</span>&gt;</span>Read more..<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  </span><span class="hljs-template-tag">{{/<span class="hljs-name"><span class="hljs-builtin-name">each</span></span>}}</span><span class="xml">
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</span></code></pre>
<h2 id="tag.hbs">tag.hbs</h2>
<p>This is the tag page which is generated from the tags set in your post markdown. A page is create for each tag you use in your markdown files and is accessible at: <code>/tag/&lt;tag-value&gt;</code>. Keep this in mind when setting tag values where you will want to give permalink type values for pretty URLs.</p>
<p>A simple template could look like:</p>
<pre><code class="language-handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Tag: </span><span class="hljs-template-variable">{{<span class="hljs-name">tag</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
  </span><span class="hljs-template-tag">{{#<span class="hljs-name"><span class="hljs-builtin-name">each</span></span> posts}}</span><span class="xml">
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-12 col-sm-3 mb-4 d-flex align-items-stretch&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card shadow-sm&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-body&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/</span></span></span><span class="hljs-template-variable">{{<span class="hljs-name">this.permalink</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><span class="hljs-template-variable">{{<span class="hljs-name">this.title</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> 
          <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
          </span><span class="hljs-template-variable">{{<span class="hljs-name">this.summary</span>}}</span><span class="xml">
        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d-flex justify-content-between align-items-center&quot;</span>&gt;</span>
          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-outline-secondary&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/</span></span></span><span class="hljs-template-variable">{{<span class="hljs-name">this.permalink</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/&quot;</span>&gt;</span>Read more..<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  </span><span class="hljs-template-tag">{{/<span class="hljs-name"><span class="hljs-builtin-name">each</span></span>}}</span><span class="xml">
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</span></code></pre>
<h2 id="404.hbs">404.hbs</h2>
<p>Hopefully this one is obvious. If at any point a page isn't found or a URL is mistyped this 404 page will be rendered.</p>
<p>A simple template:</p>
<pre><code class="language-handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6 offset-md-3 mt-5 mb-3&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/content/images/squido.svg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;squido logo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-fluid&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-5 text-center&quot;</span>&gt;</span>404 - Page not found<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</span></code></pre>
<h2 id="includes">Includes</h2>
<p>You can include local Stylesheets and Javascript files in the <code>layout.hbs</code> file by using path starting with <code>/content</code> and then wherever you have placed the file. Eg: <code>/content/stylesheets/&lt;myfile&gt;.css</code>.</p>
<p>The <code>layout.hbs</code> also includes a <code>config</code> property named <code>fileEnv</code> (<code>{{config.fileEnv}}</code>) which will return either nothing or <code>.min</code> if you have set the <code>NODE_ENV</code> to <code>production</code>. This is useful if you are wanting to use the un-minified CSS or JS file when troubleshooting/developing your website and using the minified version when in production.</p>
<p>Example usage:</p>
<pre><code class="language-handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/content/stylesheets/style</span></span></span><span class="hljs-template-variable">{{<span class="hljs-name">config.fileEnv</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">.css&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/content/javascripts/site</span></span></span><span class="hljs-template-variable">{{<span class="hljs-name">config.fileEnv</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</span></code></pre>
<h2 id="tags">Tags</h2>
<p>Within a post you have access to a <code>tag</code> array which contains all the tags for that post. You may want to iterate through that array to link to the <code>/tag/&lt;tag-value&gt;</code> URL. For example:</p>
<pre><code class="language-handlebars"><span class="hljs-template-tag">{{#<span class="hljs-name"><span class="hljs-builtin-name">if</span></span> tags}}</span><span class="xml">
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-8 offset-md-2 mb-5&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted&quot;</span>&gt;</span>Tags:<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>
        </span><span class="hljs-template-tag">{{#<span class="hljs-name"><span class="hljs-builtin-name">each</span></span> tags}}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/tag/</span></span></span><span class="hljs-template-variable">{{<span class="hljs-name">this</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/&quot;</span>&gt;</span></span><span class="hljs-template-variable">{{<span class="hljs-name">this</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |
        </span><span class="hljs-template-tag">{{/<span class="hljs-name"><span class="hljs-builtin-name">each</span></span>}}</span><span class="xml">
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</span><span class="hljs-template-tag">{{/<span class="hljs-name"><span class="hljs-builtin-name">if</span></span>}}</span><span class="xml">
</span></code></pre>
<h2 id="pagination">Pagination</h2>
<p>If <code>pagination</code> is set to true in your <code>config.js</code> file, the <code>post</code> object available on all templates will be paginated to the <code>postPerPage</code> value you set in your <code>config.js</code>. Eg: 10 posts and <code>postPerPage</code> set to 5 will create 2 pages. 1, the index page and <code>/page/1</code> as the first paginated page.</p>
<p>You will also get a <code>shouldPaginate</code> variable which will return <code>true</code> or <code>false</code> depending on whether there is more posts than can be displayed - eg: you should paginate.</p>
<p>An example displaying the pagination might look like:</p>
<pre><code class="language-handlebars"><span class="hljs-comment">{{!-- Pagination --}}</span><span class="xml">
</span><span class="hljs-template-tag">{{#<span class="hljs-name"><span class="hljs-builtin-name">if</span></span> config.pagination}}</span><span class="xml">
</span><span class="hljs-template-tag">{{#<span class="hljs-name"><span class="hljs-builtin-name">if</span></span> shouldPaginate}}</span><span class="xml">
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-12 col-sm-12 mb-4 text-center&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-muted&quot;</span>&gt;</span>Page </span><span class="hljs-template-variable">{{<span class="hljs-name">page</span>}}</span><span class="xml"> of </span><span class="hljs-template-variable">{{<span class="hljs-name">pages</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-group&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;group&quot;</span>&gt;</span>
    </span><span class="hljs-template-tag">{{#<span class="hljs-name"><span class="hljs-builtin-name">if</span></span> prevPage }}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/page/</span></span></span><span class="hljs-template-variable">{{<span class="hljs-name">prevPage</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-outline-secondary&quot;</span>&gt;</span><span class="hljs-symbol">&amp;laquo;</span> Prev Page<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    </span><span class="hljs-template-tag">{{/<span class="hljs-name"><span class="hljs-builtin-name">if</span></span>}}</span><span class="xml">
    </span><span class="hljs-template-tag">{{#<span class="hljs-name"><span class="hljs-builtin-name">if</span></span> nextPage }}</span><span class="xml">
        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/page/</span></span></span><span class="hljs-template-variable">{{<span class="hljs-name">nextPage</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-outline-secondary&quot;</span>&gt;</span>Next Page <span class="hljs-symbol">&amp;raquo;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    </span><span class="hljs-template-tag">{{/<span class="hljs-name"><span class="hljs-builtin-name">if</span></span>}}</span><span class="xml">
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</span><span class="hljs-template-tag">{{/<span class="hljs-name"><span class="hljs-builtin-name">if</span></span>}}</span><span class="xml">
</span><span class="hljs-template-tag">{{/<span class="hljs-name"><span class="hljs-builtin-name">if</span></span>}}</span><span class="xml">
</span></code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sitemap and Feeds]]></title>
        <id>https://squido-app.pages.dev/sitemap-and-feeds</id>
        <link href="https://squido-app.pages.dev/sitemap-and-feeds"/>
        <updated>2021-03-02T18:55:00.000Z</updated>
        <summary type="html"><![CDATA[Getting started with the squido sitemap and feeds]]></summary>
        <content type="html"><![CDATA[<p>A website sitemap is automatically built and can be found at <code>/sitemap.xml</code>. Eg: <code>example.com/sitemap.xml</code></p>
<p>RSS/Atom/JSON feeds are also automatically built and can be found at:</p>
<ul>
<li><code>/rss</code>. Eg: <code>example.com/rss</code></li>
<li><code>/atom</code>. Eg: <code>example.com/atom</code></li>
<li><code>/json</code>. Eg: <code>example.com/json</code></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Plugins]]></title>
        <id>https://squido-app.pages.dev/plugins</id>
        <link href="https://squido-app.pages.dev/plugins"/>
        <updated>2021-03-01T18:53:00.000Z</updated>
        <summary type="html"><![CDATA[Getting started with the squido plugins]]></summary>
        <content type="html"><![CDATA[<p>Plugins can be created for if core functionality is not included or customisation is required. Plugins run at the final step of the build so you can override any of the existing steps if needed.</p>
<p>Plugins are Javascript files within <code>/&lt;source dir&gt;/plugins/&lt;plugin name&gt;.js</code>.</p>
<p>The plugin file needs to export a function named <code>run</code>. For example:</p>
<pre><code class="language-javascript"><span class="hljs-keyword">const</span> run = <span class="hljs-function">(<span class="hljs-params">opts</span>) =&gt;</span> {
  <span class="hljs-comment">/* code in here */</span>
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;opts&#x27;</span>, opts);
};

<span class="hljs-built_in">module</span>.exports = {
  run
};
</code></pre>
<h3 id="configuration">Configuration</h3>
<p>Adding plugins to your <code>/config.js</code> file is simple by adding the plugin to the plugins array:</p>
<pre><code class="language-javascript"><span class="hljs-keyword">const</span> config = {
  <span class="hljs-attr">development</span>: {
    ...
    <span class="hljs-attr">plugins</span>: [
      {
        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;search&#x27;</span>,
        <span class="hljs-attr">options</span>: {}
      }
    ]
  }
}
</code></pre>
<p><code>name</code>: the name of the plugin. This also needs to match the name of the file. Eg: <code>/source/plugins/search.js</code></p>
<p><code>options</code>: An arg object passed into the plugin.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Import content]]></title>
        <id>https://squido-app.pages.dev/import-content</id>
        <link href="https://squido-app.pages.dev/import-content"/>
        <updated>2021-02-28T18:53:00.000Z</updated>
        <summary type="html"><![CDATA[Getting started with the importing content]]></summary>
        <content type="html"><![CDATA[<p><code>squido</code> allows the importing of content from <a href="https://ghost.org/">Ghost</a> and <a href="https://wordpress.org/">Wordpress</a>.</p>
<p>We will use the <a href="/usage-commands/#import-command">import</a> command.</p>
<h2 id="ghost">Ghost</h2>
<p>To import data, you first need to export your data from your Ghost site:</p>
<ol>
<li>Login to the Ghost admin panel</li>
<li>Select the <code>cog</code> icon at the bottom of the sidebar</li>
<li>Select <code>Labs</code></li>
<li>Click <code>Export your content</code></li>
</ol>
<p>To import that data into <code>squido</code> you need to run this command from the root of your <code>squido</code> website:</p>
<pre><code class="language-plaintext">$ squido import -f /path/to/file/ghost.json -t ghost
</code></pre>
<p>You will see a new folder with all your posts in Markdown format here: <code>/imported</code>.</p>
<p>You can check your files are imported correctly then move your newly imported Markdown files here: <code>/&lt;source dir&gt;/posts</code>.</p>
<h2 id="wordpress">Wordpress</h2>
<p>To import data, you first need to export your data from your Wordpress site:</p>
<ol>
<li>Login to Wordpress admin panel</li>
<li>Select <code>Tools</code></li>
<li>Select <code>Export</code></li>
<li>Click <code>Export all</code></li>
</ol>
<p>To import that data into <code>squido</code> you need to run this command from the root of your <code>squido</code> website:</p>
<pre><code class="language-plaintext">$ squido import -f /path/to/file/wordpress.xml -t wordpress
</code></pre>
<p>You will see a new folder with all your posts in Markdown format here: <code>/imported</code>.</p>
<p>You can check your files are imported correctly then move your newly imported Markdown files here: <code>/&lt;source dir&gt;/posts</code>.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deployment and hosting]]></title>
        <id>https://squido-app.pages.dev/deployment-and-hosting</id>
        <link href="https://squido-app.pages.dev/deployment-and-hosting"/>
        <updated>2021-02-27T18:52:00.000Z</updated>
        <summary type="html"><![CDATA[Getting started with deploying and hosting your squido website. Deployment guides using Netlify, Github Pages, AWS Amplify, Cloudflare Pages, Digitalocean app and more]]></summary>
        <content type="html"><![CDATA[<h2 id="netlify">Netlify</h2>
<p>You can host this website anywhere static websites are supported. Some options are <a href="https://www.netlify.com">https://www.netlify.com</a> as the deployments are just dead simple.</p>
<p>Simply connect your Git repo and set the <code>Build settings</code> settings like below:</p>
<p><img src="/content/images/netlify-build.png" alt="Netlify build"></p>
<p>And set the Environment variable to align with your <code>config.js</code> file:</p>
<p><img src="/content/images/netlify-environment.png" alt="Netlify environment"></p>
<p>You are done. Now each push to your Git repo will trigger the build and deploy on <a href="https://www.netlify.com">Netlify</a>.</p>
<h2 id="github-pages">Github pages</h2>
<p>Publishing to Github pages is easy. Simply set your config <code>buildDir</code> to <code>docs</code> and the correct <code>baseUrl</code>. Eg:</p>
<pre><code class="language-javascript">production: {
    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;squido&#x27;</span>,
    <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;This is the blog description&#x27;</span>,
    <span class="hljs-attr">twitterHandle</span>: <span class="hljs-string">&#x27;@mrvautin&#x27;</span>,
    <span class="hljs-attr">baseUrl</span>: <span class="hljs-string">&#x27;https://&lt;github-username&gt;.github.io&#x27;</span>,
    <span class="hljs-attr">sourcesExt</span>: <span class="hljs-string">&#x27;markdown&#x27;</span>,
    <span class="hljs-attr">sourceDir</span>: <span class="hljs-string">&#x27;source&#x27;</span>,
    <span class="hljs-attr">buildDir</span>: <span class="hljs-string">&#x27;docs&#x27;</span>,
    <span class="hljs-attr">summaryLength</span>: <span class="hljs-number">250</span>,
    <span class="hljs-attr">port</span>: <span class="hljs-number">4965</span>,
    <span class="hljs-attr">pagination</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-attr">postPerPage</span>: <span class="hljs-number">8</span>
}
</code></pre>
<p>Then simply build your website with <code>squido build -c</code> and push to your Github repo.</p>
<p>You then need to set <code>Source</code> to <code>/docs</code> as shown <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site">here</a> and may need to change the branch.</p>
<p>You can then either access at your Repo URL (<code>https://&lt;github-username&gt;.github.io</code>) or a <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#about-custom-domain-configuration">custom domain</a></p>
<h2 id="amazon-aws-amplify">Amazon AWS Amplify</h2>
<p>It's very easy to publish your <code>squido</code> website to <a href="https://aws.amazon.com/amplify/">AWS Amplify</a>.</p>
<ol>
<li>Login <a href="https://console.aws.amazon.com/amplify/home">here</a></li>
<li>Select <code>New App</code></li>
<li>Select <code>Host web app</code></li>
<li>Select the Git repository and authenticate. Eg: Github</li>
<li>Select the Repository name and branch from the populated list(s)</li>
<li>Click <code>Edit</code> on the build commands and ensure <code>baseDirectory</code> is set to <code>/build</code>. Eg Yaml file will look like:</li>
</ol>
<pre><code class="language-yaml"><span class="hljs-attr">version:</span> <span class="hljs-number">1</span>
<span class="hljs-attr">frontend:</span>
  <span class="hljs-attr">phases:</span>
    <span class="hljs-attr">preBuild:</span>
      <span class="hljs-attr">commands:</span>
        <span class="hljs-bullet">-</span> <span class="hljs-string">npm</span> <span class="hljs-string">ci</span>
    <span class="hljs-attr">build:</span>
      <span class="hljs-attr">commands:</span>
        <span class="hljs-bullet">-</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span>
  <span class="hljs-attr">artifacts:</span>
    <span class="hljs-attr">baseDirectory:</span> <span class="hljs-string">/build</span>
    <span class="hljs-attr">files:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*&#x27;</span>
  <span class="hljs-attr">cache:</span>
    <span class="hljs-attr">paths:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">node_modules/**/*</span>
</code></pre>
<ol start="7">
<li>Click <code>Save and deploy</code> and wait for your website to be built!</li>
</ol>
<h2 id="cloudflare-pages">Cloudflare Pages</h2>
<p>It's very easy to publish your <code>squido</code> website for <code>FREE</code> using <a href="https://pages.cloudflare.com/">Cloudflare pages</a>. Free SSL, custom domain, global CDN and more and just super simple to setup.</p>
<ol>
<li>Login <a href="https://pages.cloudflare.com/">here</a></li>
<li>Select <code>Create new project</code></li>
<li>Link your Github account and select your repository, then <code>Begin setup</code></li>
<li>Setup like:</li>
</ol>
<p><img src="/content/images/cloudflare-pages.png" alt="Cloudflare setup"></p>
<ol start="5">
<li>Click <code>Save and deploy</code></li>
<li>Wait for the build to complete</li>
<li>You can then setup <code>Custom domains</code> and you are done</li>
</ol>
<h2 id="digitalocean-apps">Digitalocean Apps</h2>
<p><a href="https://cloud.digitalocean.com/apps?refcode=cd185d01653f">Digitalocean Apps</a> makes hosting your static HTML <code>squido</code> website for <code>FREE</code> just so bloody easy. <a href="https://cloud.digitalocean.com/apps?refcode=cd185d01653f">Digitalocean Apps</a> offers free SSL, custom domain, global CDN and more.</p>
<ol>
<li>Login <a href="https://cloud.digitalocean.com/apps?refcode=cd185d01653f">here</a></li>
<li>Select <code>Github</code> as source and choose your <code>squido</code> Repository:</li>
</ol>
<p><img src="/content/images/digitalocean-source.png" alt="Digitalocean source"></p>
<ol start="3">
<li>Hit <code>Next</code></li>
<li>Setup like:</li>
</ol>
<p><img src="/content/images/digitalocean-config.png" alt="Digitalocean setup"></p>
<ol start="5">
<li>Hit <code>Next</code>.</li>
<li>Name your app then hit <code>Next</code> once more</li>
<li>Select the plan. Choose <code>Starter</code> for <code>FREE</code> hosting</li>
<li>Hit <code>Launch Starter App</code></li>
<li>Wait for your app to build. Watch the logs by clicking the <code>View logs</code> button</li>
<li>Once your build is complete you can select <code>Settings</code> and configure your domain and more</li>
</ol>
<p>You are done. Enjoy your super fast hosting on the awesome Digitalocean platform!</p>
<h2 id="azure-static-web-apps">Azure Static Web Apps</h2>
<p>Publishing your <code>squido</code> website to <a href="https://azure.microsoft.com/en-au/services/app-service/static/">Azure Static Web Apps</a> is very easy and low cost.</p>
<ol>
<li>Visit <a href="portal.azure.com">portal.azure.com</a>, login and create a free Static Web App.</li>
<li>To use Azure DevOps instead of a Github repo, select <code>Other</code> under <code>Deployment details</code>.</li>
<li>Once the resource is provisioned, from the Static Web App Overview page, click <code>Manage Deployment Token</code>. Copy this token somewhere safe. It will be used later.</li>
</ol>
<p><img src="/content/images/azure-setup.png" alt="image"></p>
<ol start="4">
<li>Visit <a href="devops.azure.com">devops.azure.com</a>, login and create a New Project</li>
<li>Click <code>Repos</code> and clone the Azure repo to your local machine. Either move your existing <code>squido</code> site into this local repo, or create a new <code>squido</code> site. Commit and push code to this Azure DevOps repo</li>
<li>Click <code>Pipelines</code> and create a new Pipeline for the project. Select <code>Starter Pipeline</code> and paste in the yaml template below</li>
</ol>
<pre><code class="language-yaml"><span class="hljs-attr">trigger:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-string">main</span>
<span class="hljs-attr">pool:</span>
  <span class="hljs-attr">vmImage:</span> <span class="hljs-string">ubuntu-latest</span>
<span class="hljs-attr">variables:</span>
<span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NODE_ENV</span>
  <span class="hljs-attr">value:</span> <span class="hljs-string">production</span> 
<span class="hljs-attr">steps:</span>
  <span class="hljs-bullet">-</span> <span class="hljs-attr">checkout:</span> <span class="hljs-string">self</span>
    <span class="hljs-attr">submodules:</span> <span class="hljs-literal">true</span>
  <span class="hljs-bullet">-</span> <span class="hljs-attr">task:</span> <span class="hljs-string">AzureStaticWebApp@0</span>
    <span class="hljs-attr">inputs:</span>
      <span class="hljs-attr">app_location:</span> <span class="hljs-string">&#x27;/&#x27;</span>
      <span class="hljs-attr">output_location:</span> <span class="hljs-string">&#x27;/build&#x27;</span>
      <span class="hljs-attr">azure_static_web_apps_api_token:</span> <span class="hljs-string">$(deployment_token)</span>
</code></pre>
<ol start="7">
<li>Click <code>Variables</code> then <code>New Variable</code></li>
<li>Name the variable <code>deployment_token</code> and paste in the <code>Deployment Token</code> from Step 1c. above</li>
<li>Save and run the Pipeline</li>
<li>Visit the URL shown in Static Web Apps in Azure Portal</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Admin editor]]></title>
        <id>https://squido-app.pages.dev/admin-editor</id>
        <link href="https://squido-app.pages.dev/admin-editor"/>
        <updated>2021-02-26T18:52:00.000Z</updated>
        <summary type="html"><![CDATA[squido admin allows you to edit your website content straight from your browser. You can create, edit and delete posts without using a text editor.]]></summary>
        <content type="html"><![CDATA[<p>The <code>squido</code> admin panel is accessible after running the <a href="https://docs.squido.org/usage-commands/#serve-command">serve</a>.</p>
<p>Running serve:</p>
<pre><code class="language-plaintext">$ squido serve -b -c -w
</code></pre>
<p>Open the following in a browser: <code>http://localhost:4965/squido</code></p>
<p>You should see:</p>
<p><img src="/content/images/squido-admin.png" alt="squido admin"></p>
<p>Here you can create, edit and delete any posts for you website. Once you have completed you simply need to deploy or Git commit and push to your repo.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Post build tasks]]></title>
        <id>https://squido-app.pages.dev/post-build-tasks</id>
        <link href="https://squido-app.pages.dev/post-build-tasks"/>
        <updated>2021-02-25T18:52:00.000Z</updated>
        <summary type="html"><![CDATA[Getting started with the squido post build tasks]]></summary>
        <content type="html"><![CDATA[<p>Post build tasks are tasks which run after the website is built. You can configure zipping up your website, automatic deployment etc to make deploying your website faster. See <a href="/configuration/">configuration</a> for information on configuring a task.</p>
<h2 id="zip">Zip</h2>
<p>The <code>zip</code> <code>postBuild</code> task simply zips all the files in your <code>/build</code> directory into a file called <code>build.zip</code> located here: <code>/build/build.zip</code>. You can then send/upload this file to your website host, FTP it or back it up.</p>
<p>An example <code>config.js</code> configuration is below. There are no options for this task.</p>
<pre><code class="language-javascript">production: {
  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;squido docs&#x27;</span>,
  <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;Squido documentation - A dead simple static website generator&#x27;</span>,
  ...
  <span class="hljs-attr">postBuild</span>: [
    {
        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zip&#x27;</span>,
        <span class="hljs-attr">options</span>: {}
    }
  ]
  ...
}
</code></pre>
<h2 id="netlify">Netlify</h2>
<p>The <code>netlify</code> <code>postBuild</code> deploys your website to <a href="https://netlify.com">Netlify</a> without the use of Git. This task requires the <code>zip</code> task to also be configured before this task (see below config) as this task will upload the zip file containing your website direct to <a href="https://netlify.com">Netlify</a> using their file upload API.</p>
<p>An example <code>netlify</code> task configuration is below. You can see the <code>zip</code> task is configured first:</p>
<pre><code class="language-javascript">production: {
  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;squido docs&#x27;</span>,
  <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;Squido documentation - A dead simple static website generator&#x27;</span>,
  ...
  <span class="hljs-attr">postBuild</span>: [
    {
        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zip&#x27;</span>,
        <span class="hljs-attr">options</span>: {}
    },
    {
      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;netlify&#x27;</span>,
      <span class="hljs-attr">options</span>: {
        <span class="hljs-attr">siteName</span>: <span class="hljs-string">&#x27;squido test website&#x27;</span>
        <span class="hljs-attr">apiToken</span>: <span class="hljs-string">&#x27;my-netlify-api-token&#x27;</span>
      }
    }
  ]
  ...
}
</code></pre>
<p>To use this task you will need to obtain your <code>apiToken</code> from <code>Netlify</code> by:</p>
<ol>
<li>Logging into <code>Netlify</code> here <a href="https://app.netlify.com/user/applications">https://app.netlify.com/user/applications</a></li>
<li>Under <code>Personal access tokens</code>, click <code>New access token</code></li>
<li>Set a name of your token which you will remember.</li>
<li>Copy the token and add to your <code>config.js</code> file under <code>apiToken</code></li>
</ol>
<p>After you run:</p>
<pre><code class="language-plaintext">$ squido build -c
</code></pre>
<p>The build files of your website will first be added to a zip file, then that file is uploaded to Netlify to be built and served. You can then view your Netlify websites under the <code>Sites</code> tab and can control your custom domain and other settings.</p>
]]></content>
    </entry>
</feed>